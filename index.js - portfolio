const {
  brandColor,
  lightTheme,
  darkTheme,
} = require("@metamask/design-tokens");
const defaultTheme = require("tailwindcss/defaultTheme");
const plugin = require("tailwindcss/plugin");

const designSystemColors = {
  white: brandColor.white,
  black: brandColor.black,
  red: {
    25: brandColor.red025,
    50: brandColor.red050,
    100: brandColor.red100,
    200: brandColor.red200,
    300: brandColor.red300,
    400: brandColor.red400,
    500: brandColor.red500,
    600: brandColor.red600,
    700: brandColor.red700,
    800: brandColor.red800,
    900: brandColor.red900,
  },
  orange: {
    25: brandColor.orange025,
    50: brandColor.orange050,
    100: brandColor.orange100,
    200: brandColor.orange200,
    300: brandColor.orange300,
    400: brandColor.orange400,
    500: brandColor.orange500,
    600: brandColor.orange600,
    700: brandColor.orange700,
    800: brandColor.orange800,
    900: brandColor.orange900,
  },
  blue: {
    25: brandColor.blue025,
    50: brandColor.blue050,
    100: brandColor.blue100,
    200: brandColor.blue200,
    300: brandColor.blue300,
    400: brandColor.blue400,
    500: brandColor.blue500,
    600: brandColor.blue600,
    700: brandColor.blue700,
    800: brandColor.blue800,
    900: brandColor.blue900,
  },
  green: {
    25: brandColor.green025,
    50: brandColor.green050,
    100: brandColor.green100,
    200: brandColor.green200,
    300: brandColor.green300,
    400: brandColor.green400,
    500: brandColor.green500,
    600: brandColor.green600,
    700: brandColor.green700,
    800: brandColor.green800,
    900: brandColor.green900,
  },
  lime: {
    25: brandColor.lime025,
    50: brandColor.lime050,
    100: brandColor.lime100,
    200: brandColor.lime200,
    300: brandColor.lime300,
    400: brandColor.lime400,
    500: brandColor.lime500,
    600: brandColor.lime600,
    700: brandColor.lime700,
    800: brandColor.lime800,
    900: brandColor.lime900,
  },
  purple: {
    25: brandColor.purple025,
    50: brandColor.purple050,
    100: brandColor.purple100,
    200: brandColor.purple200,
    300: brandColor.purple300,
    400: brandColor.purple400,
    500: brandColor.purple500,
    600: brandColor.purple600,
    700: brandColor.purple700,
    800: brandColor.purple800,
    900: brandColor.purple900,
  },
  /**
   * @deprecated slateGray has been deprecated in favor of text, border, icon, and background theme generated classes
   */
  slateGray: {
    50: "#D7DAE9",
    100: "#A8ABBE",
    200: "#6A6D7C",
    300: "#3E3F4B",
    400: "#262833",
    500: "#1E1F25",
    600: "#17181C",
    700: "#101213",
  },
  gray: {
    25: brandColor.grey025,
    50: brandColor.grey050,
    100: brandColor.grey100,
    200: brandColor.grey200,
    300: brandColor.grey300,
    400: brandColor.grey400,
    500: brandColor.grey500,
    600: brandColor.grey600,
    700: brandColor.grey700,
    800: brandColor.grey800,
    900: brandColor.grey900,
    1000: brandColor.grey1000,
  },
};

/**
 * @deprecated borderDeprecated has been deprecated in favor of CSS variable border generated classes
 */
const borderDeprecated = {
  /**
   * @deprecated border-hovered has been deprecated
   */
  hovered: {
    light: designSystemColors.slateGray[400],
    dark: designSystemColors.white,
  },
};

const background = {
  default: "var(--color-background-default)",
  "default-hover": "var(--color-background-default-hover)",
  "default-pressed": "var(--color-background-default-pressed)",
  alternative: "var(--color-background-alternative)",
  "alternative-hover": "var(--color-background-alternative-hover)",
  "alternative-pressed": "var(--color-background-alternative-pressed)",
  hover: "var(--color-background-hover)",
  pressed: "var(--color-background-pressed)",
};

const text = {
  default: "var(--color-text-default)",
  alternative: "var(--color-text-alternative)",
  muted: "var(--color-text-muted)",
};

/**
 * @deprecated textDeprecated has been deprecated in favor of CSS variable generated classes above
 */
const textDeprecated = {
  /**
   * @deprecated text-disabled has been deprecated
   */
  disabled: {
    light: designSystemColors.slateGray[100],
    dark: designSystemColors.slateGray[200],
  },
  /**
   * @deprecated text-inverse has been deprecated
   */
  inverse: {
    light: designSystemColors.white,
    dark: designSystemColors.slateGray[400],
  },
  /**
   * @deprecated text-info has been deprecated in favor of text-info-default
   */
  info: {
    light: lightTheme.colors.info.default,
    dark: darkTheme.colors.info.default,
  },
};

/**
 * @deprecated all surface colors will soon be deprecated use bg- classes instead
 */
const surface = {
  /**
   * @deprecated surface-default has been deprecated in favor of bg-default.
   */
  default: {
    light: designSystemColors.white,
    dark: designSystemColors.slateGray[500],
  },
  /**
   * @deprecated surface-inverse has been deprecated
   */
  inverse: {
    light: designSystemColors.slateGray[400],
    dark: designSystemColors.white,
  },
};

const icon = {
  default: "var(--color-icon-default)",
  alternative: "var(--color-icon-alternative)",
  muted: "var(--color-icon-muted)",
};

/**
 * @deprecated iconDeprecated has been deprecated in favor of CSS variable generated classes above
 */
const iconDeprecated = {
  inverse: {
    light: designSystemColors.white,
    dark: designSystemColors.black,
  },
  /**
   * @deprecated icon-info has been deprecated for info-default
   */
  info: {
    light: lightTheme.colors.info.default,
    dark: darkTheme.colors.info.default,
  },
};

const border = {
  default: "var(--color-border-default)",
  muted: "var(--color-border-muted)",
};

const shadow = {
  default: "var(--color-shadow-default)",
  primary: "var(--color-shadow-primary)",
  error: "var(--color-shadow-error)",
};

const primary = {
  default: "var(--color-primary-default)",
  "default-hover": "var(--color-primary-default-hover)",
  "default-pressed": "var(--color-primary-default-pressed)",
  muted: "var(--color-primary-muted)",
  inverse: "var(--color-primary-inverse)",
};

const error = {
  default: "var(--color-error-default)",
  "default-hover": "var(--color-error-default-hover)",
  "default-pressed": "var(--color-error-default-pressed)",
  muted: "var(--color-error-muted)",
  inverse: "var(--color-error-inverse)",
};

const warning = {
  default: "var(--color-warning-default)",
  "default-hover": "var(--color-warning-default-hover)",
  "default-pressed": "var(--color-warning-default-pressed)",
  muted: "var(--color-warning-muted)",
  inverse: "var(--color-warning-inverse)",
};

const success = {
  default: "var(--color-success-default)",
  "default-hover": "var(--color-success-default-hover)",
  "default-pressed": "var(--color-success-default-pressed)",
  muted: "var(--color-success-muted)",
  inverse: "var(--color-success-inverse)",
};

const info = {
  default: "var(--color-info-default)",
  muted: "var(--color-info-muted)",
  inverse: "var(--color-info-inverse)",
};

const overlay = {
  default: "var(--color-overlay-default)",
  alternative: "var(--color-overlay-alternative)",
  inverse: "var(--color-overlay-inverse)",
};

const keyframes = {
  slideUp20Vh: {
    "0%": { transform: "translate(0, 20vh)" },
    "40%": { transform: "translate(0, 20vh)" },
    "100%": { transform: "translate(0, 0)" },
  },
  slideDown20Vh: {
    "0%": { transform: "translate(0, -20vh)" },
    "40%": { transform: "translate(0, -20vh)" },
    "100%": { transform: "translate(0, 0)" },
  },
  fadeIn: {
    "0%": { opacity: "0%" },
    "40%": { opacity: "0%" },
    "100%": { opacity: "100%" },
  },
};

const animation = {
  "maintenance-page-slide-up": "slideUp20Vh 1.5s",
  "maintenance-page-slide-down": "slideDown20Vh 1.5s",
  "maintenance-page-fade-in": "fadeIn 1.5s",
};

module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  darkMode: "class", // or 'media' or 'class'
  theme: {
    extend: {
      colors: {
        background: {
          ...background,
        },
        text: {
          ...text,
        },
        icon: {
          ...icon,
        },
        border: {
          ...border,
        },
        primary: {
          ...primary,
        },
        error: {
          ...error,
        },
        warning: {
          ...warning,
        },
        success: {
          ...success,
        },
        info: {
          ...info,
        },
        overlay: {
          ...overlay,
        },
        shadow: {
          ...shadow,
        },
        portfolio: designSystemColors,
      },
      borderColor: (theme) => ({
        ...theme("colors"), // Incorporate existing color utilities
        ...border,
      }),
      fontSize: {
        ...defaultTheme.fontSize,
        xxs: [".625rem", "1rem"],
        xs: [".75rem", "1rem"],
        sm: [".875rem", "1.25rem"],
        base: ["1rem", "1.5rem"],
        xl: ["1.25rem", "1.75rem"],
        "2xl": ["1.5rem", "2rem"],
        "3xl": ["2rem", "2.5rem"],
        "4xl": ["2.5rem", "3.5rem"],
      },
      fontFamily: {
        sans: ["EuclidCircularB", "Inter var", ...defaultTheme.fontFamily.sans],
      },
      screens: {
        xs: "415px",
        ...defaultTheme.screens,
        "3xl": "1800px",
      },
      keyframes,
      animation,
      boxShadow: {
        card: "0px 6px 25px 0px #00000026",
      },
      textColor: {
        ...text,
      },
    },
    backgroundColor: (theme) => ({
      ...theme("colors"), // Incorporate existing color utilities
      ...background,
    }),
    divideColor: () => ({
      muted: "var(--color-border-muted)",
    }),
  },
  plugins: [
    require("@tailwindcss/forms"),
    plugin(function ({ addUtilities }) {
      const backgroundSurfaceStyles = Object.entries(surface).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.bg-surface-${key}`]: {
            "background-color": value.light,
            ".dark &": {
              "background-color": value.dark,
            },
          },
        }),
        {}
      );

      const backgroundBorderStyles = Object.entries(borderDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.bg-border-${key}`]: {
            "background-color": value.light,
            ".dark &": {
              "background-color": value.dark,
            },
          },
        }),
        {}
      );

      const borderStyles = Object.entries(borderDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.border-${key}`]: {
            "border-color": value.light,
            ".dark &": {
              "border-color": value.dark,
            },
          },
        }),
        {}
      );

      const borderIconStyles = Object.entries(iconDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.border-icon-${key}`]: {
            "border-color": value.light,
            ".dark &": {
              "border-color": value.dark,
            },
          },
        }),
        {}
      );

      const borderTStyles = Object.entries(borderDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.border-t-${key}`]: {
            "border-top-color": value.light,
            ".dark &": {
              "border-top-color": value.dark,
            },
          },
        }),
        {}
      );

      const borderBStyles = Object.entries(borderDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.border-b-${key}`]: {
            "border-bottom-color": value.light,
            ".dark &": {
              "border-bottom-color": value.dark,
            },
          },
        }),
        {}
      );

      const borderTTextStyles = Object.entries(textDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.border-t-text-${key}`]: {
            "border-top-color": value.light,
            ".dark &": {
              "border-top-color": value.dark,
            },
          },
        }),
        {}
      );

      const ringBorderStyles = Object.entries(borderDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.ring-${key}`]: {
            "--tw-ring-color": value.light,
            ".dark &": {
              "--tw-ring-color": value.dark,
            },
          },
        }),
        {}
      );
      const textStyles = Object.entries(textDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.text-${key}`]: {
            color: value.light,
            ".dark &": {
              color: value.dark,
            },
          },
        }),
        {}
      );
      const iconTextStyles = Object.entries(iconDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.text-icon-${key}`]: {
            color: value.light,
            ".dark &": {
              color: value.dark,
            },
          },
        }),
        {}
      );
      const iconFillStyles = Object.entries(iconDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.fill-icon-${key}`]: {
            fill: value.light,
            ".dark &": {
              fill: value.dark,
            },
          },
        }),
        {}
      );
      const iconStrokeStyles = Object.entries(iconDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.stroke-icon-${key}`]: {
            stroke: value.light,
            ".dark &": {
              stroke: value.dark,
            },
          },
        }),
        {}
      );
      const iconBgStyles = Object.entries(iconDeprecated).reduce(
        (acc, [key, value]) => ({
          ...acc,
          [`.bg-icon-${key}`]: {
            "background-color": value.light,
            ".dark &": {
              "background-color": value.dark,
            },
          },
        }),
        {}
      );

      const noScrollbarStyles = {
        ".no-scrollbar::-webkit-scrollbar": { display: "none" },
        ".no-scrollbar": {
          "-ms-overflow-style": "none",
          "scrollbar-width": "none",
        },
      };

      addUtilities({
        ...backgroundSurfaceStyles,
        ...backgroundBorderStyles,
        ...borderStyles,
        ...borderIconStyles,
        ...borderTStyles,
        ...borderBStyles,
        ...borderTTextStyles,
        ...ringBorderStyles,
        ...textStyles,
        ...iconTextStyles,
        ...iconFillStyles,
        ...iconStrokeStyles,
        ...iconBgStyles,
        ...noScrollbarStyles,
      });
    }),
  ],
  designSystemColors,
  border,
  borderDeprecated,
  background,
  text,
  textDeprecated,
  surface,
  icon,
  iconDeprecated,
  overlay,
  shadow,
  primary,
  error,
  warning,
  success,
  info,
};
